# Autogenerated using ProtoBuf.jl v1.0.7 on 2022-10-06T17:40:28.572
# original file: D:\Aure\Documenti\Github\TFRecord.jl\test.proto (proto3 syntax)

module test_pb

import ProtoBuf as PB
using ProtoBuf: OneOf
using EnumX: @enumx

export MyMessage

struct MyMessage
    oneof_field::Union{Nothing,OneOf{<:Union{Int32,String}}}
end
PB.oneof_field_types(::Type{MyMessage}) = (;
    oneof_field = (;option1=Int32, option2=String),
)
PB.default_values(::Type{MyMessage}) = (;option1 = zero(Int32), option2 = "")
PB.field_numbers(::Type{MyMessage}) = (;option1 = 1, option2 = 2)

function PB.decode(d::PB.AbstractProtoDecoder, ::Type{<:MyMessage})
    oneof_field = nothing
    while !PB.message_done(d)
        field_number, wire_type = PB.decode_tag(d)
        if field_number == 1
            oneof_field = OneOf(:option1, PB.decode(d, Int32))
        elseif field_number == 2
            oneof_field = OneOf(:option2, PB.decode(d, String))
        else
            PB.skip(d, wire_type)
        end
    end
    return MyMessage(oneof_field)
end

function PB.encode(e::PB.AbstractProtoEncoder, x::MyMessage)
    initpos = position(e.io)
    if isnothing(x.oneof_field);
    elseif x.oneof_field.name === :option1
        PB.encode(e, 1, x.oneof_field[])
    elseif x.oneof_field.name === :option2
        PB.encode(e, 2, x.oneof_field[])
    end
    return position(e.io) - initpos
end
function PB._encoded_size(x::MyMessage)
    encoded_size = 0
    if isnothing(x.oneof_field);
    elseif x.oneof_field.name === :option1
        encoded_size += PB._encoded_size(x.oneof_field[], 1)
    elseif x.oneof_field.name === :option2
        encoded_size += PB._encoded_size(x.oneof_field[], 2)
    end
    return encoded_size
end
end # module
